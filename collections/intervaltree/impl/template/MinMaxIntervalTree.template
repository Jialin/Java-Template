[
  {
    "Compare": "Min",
    "Type": "Int",
    "compare": "min",
    "initvalue": "Integer.MAX_VALUE",
    "type": "int"
  },
  {
    "Compare": "Max",
    "Type": "Int",
    "compare": "max",
    "initvalue": "Integer.MIN_VALUE",
    "type": "int"
  },
  {
    "Compare": "Min",
    "Type": "Long",
    "compare": "min",
    "initvalue": "Long.MAX_VALUE",
    "type": "long"
  },
  {
    "Compare": "Max",
    "Type": "Long",
    "compare": "max",
    "initvalue": "Long.MIN_VALUE",
    "type": "long"
  }
]
====================================================================================================
package template.collections.intervaltree.impl;

import template.collections.intervaltree.AbstractIntervalTree;

/**
 * Interval tree supports:
 * <ul>
 *   <li>Setting value in a node</li>
 *   <li>Calculating the %compare% value in a range</li>
 * </ul>
 */
public class %Type%%Compare%IntervalTree extends AbstractIntervalTree {

  public %Type%%Compare%IntervalTree(int leafCapacity) {
    super(leafCapacity);
  }

  private %type%[] values;
  private %type%[] %compare%Values;

  @Override
  public void init(int n) {
    throw new UnsupportedOperationException();
  }

  @Override
  public void createStorage(int nodeCapacity) {
    %compare%Values = new %type%[nodeCapacity];
  }

  @Override
  public void initLeaf(int idxInTree, int idx) {
    %compare%Values[idxInTree] = values[idx];
  }

  @Override
  public void merge(int leftIdxInTree, int rightIdxInTree, int idxInTree) {
    %compare%Values[idxInTree] = Math.%compare%(
        %compare%Values[leftIdxInTree], %compare%Values[rightIdxInTree]);
  }

  @Override
  public void copyForCalc(int fromIdxInTree, int toIdxInTree) {
    %compare%Values[toIdxInTree] = %compare%Values[fromIdxInTree];
  }

  @Override
  public void clearNode(int idxInTree) {
    %compare%Values[idxInTree] = %initvalue%;
  }

  @Override
  public String toDisplay(int idxInTree) {
    return String.valueOf(%compare%Values[idxInTree]);
  }

  public void init(int n, %type%[] values) {
    this.values = values;
    super.init(n);
  }

  public void update(int idx, %type% value) {
    %compare%Values[idxInTree(idx)] = value;
    populateRangeUpdateToRoot(idx, idx + 1);
  }

  public %type% calc(int lower, int upper) {
    calcRange(lower, upper);
    return %compare%Values[0];
  }
}
