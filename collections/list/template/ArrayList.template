[
  {
    "filename": "CharArrayList",
    "type": "char",
    "Type": "Char"
  },
  {
    "filename": "IntArrayList",
    "type": "int",
    "Type": "Int"
  },
  {
    "filename": "LongArrayList",
    "type": "long",
    "Type": "Long"
  }
]
====================================================================================================
package template.collections.list;

import template.array.%Type%ArrayUtils;
import template.collections.%Type%Collection;

import java.util.Arrays;
import java.util.Random;

public class %Type%ArrayList implements %Type%Collection {

  private static final %type%[] EMPTY = {};

  public %type%[] values;
  public int size;

  public %Type%ArrayList() {
    values = EMPTY;
    clear();
  }

  public %Type%ArrayList(int capacity) {
    values = new %type%[Integer.highestOneBit(capacity) << 1];
    clear();
  }

  @Override
  public void clear() {
    size = 0;
  }

  @Override
  public int size() {
    return size;
  }

  @Override
  public void add(%type% value) {
    ensureCapacity(size + 1);
    values[size++] = value;
  }

  public %type% peekLast() {
    return values[size - 1];
  }

  public %type% pollLast() {
    return values[--size];
  }

  public %type% get(int idx) {
    if (idx >= size) throw new ArrayIndexOutOfBoundsException();
    return values[idx];
  }

  public void set(int idx, %type% value) {
    if (idx >= size) throw new ArrayIndexOutOfBoundsException();
    values[idx] = value;
  }

  public void swap(int x, int y) {
    if (x >= size || y >= size) throw new ArrayIndexOutOfBoundsException();
    %Type%ArrayUtils.swap(values, x, y);
  }

  public void sort() {
    Arrays.sort(values, 0, size);
  }

  public void unique() {
    size = %Type%ArrayUtils.unique(values, 0, size);
  }

  public void sortAndUnique() {
    sort();
    unique();
  }

  public int lowerBound(%type% value) {
    return %Type%ArrayUtils.lowerBound(values, 0, size, value);
  }

  public void reverse() {
    %Type%ArrayUtils.reverse(values, 0, size);
  }

  public void shuffle() {
    %Type%ArrayUtils.shuffle(values, 0, size);
  }

  @Override
  public String toString() {
    return %Type%ArrayUtils.toString(values, 0, size);
  }

  protected void ensureCapacity(int capacity) {
    if (capacity <= values.length) return;
    %type%[] newValues = new %type%[Integer.highestOneBit(capacity) << 1];
    for (int i = 0; i < values.length; ++i) {
      newValues[i] = values[i];
    }
    values = newValues;
  }
}
