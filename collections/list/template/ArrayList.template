[
  {
    "Class": "Character",
    "Type": "Char",
    "type": "char"
  },
  {
    "Class": "Integer",
    "Type": "Int",
    "type": "int"
  },
  {
    "Class": "Long",
    "Type": "Long",
    "type": "long"
  }
]
====================================================================================================
package template.collections.list;

import template.array.%Type%ArrayUtils;
import template.collections.%Type%Collection;
import template.io.Displayable;
import template.numbertheory.number.IntUtils;

import java.util.Collection;
import java.util.Iterator;

public class %Type%ArrayList implements Displayable, %Type%Collection, Iterable<%Class%> {

  private static final %type%[] EMPTY = {};

  public %type%[] values;
  public int size;

  public %Type%ArrayList() {
    values = EMPTY;
    clear();
  }

  public %Type%ArrayList(int capacity) {
    values = new %type%[IntUtils.nextPow2(capacity)];
    clear();
  }

  public %Type%ArrayList(Collection<%Class%> collection) {
    this(collection.size());
    addAll(collection);
  }

  public void initRange(%type% start, %type% end) {
    clear();
    for (%type% i = start; i < end; ++i) {
      add(i);
    }
  }

  @Override
  public void clear() {
    size = 0;
  }

  @Override
  public int size() {
    return size;
  }

  @Override
  public void add(%type% value) {
    ensureCapacity(size + 1);
    addInternal(value);
  }

  @Override
  public void addAll(%type%[] values) {
    addAll(values, 0, values.length);
  }

  @Override
  public void addAll(Collection<%Class%> values) {
    ensureCapacity(size + values.size());
    for (%type% value : values) {
      addInternal(value);
    }
  }

  public void addAll(%Type%ArrayList values) {
    ensureCapacity(size + values.size);
    for (int i = 0; i < values.size; ++i) {
      addInternal(values.get(i));
    }
  }

  public void addAll(%type%[] values, int lower, int upper) {
    ensureCapacity(size + upper - lower);
    for (int i = lower; i < upper; ++i) {
      addInternal(values[i]);
    }
  }

  public %type% peekLast() {
    return values[size - 1];
  }

  public %type% pollLast() {
    return values[--size];
  }

  public void remove(int idx) {
    if (size == 0) {
      throw new ArrayIndexOutOfBoundsException();
    }
    idx = fixIdx(idx);
    for (int i = idx, j = i + 1; j < size; ++i, ++j) {
      values[i] = values[j];
    }
    --size;
  }

  public %type% get(int idx) {
    return values[fixIdx(idx)];
  }

  public void set(int idx, %type% value) {
    values[fixIdx(idx)] = value;
  }

  public void swap(int x, int y) {
    if (x >= size || y >= size) {
      throw new ArrayIndexOutOfBoundsException();
    }
    %Type%ArrayUtils.swap(values, x, y);
  }

  public void sort() {
    %Type%ArrayUtils.sort(values, 0, size);
  }

  public void unique() {
    size = %Type%ArrayUtils.unique(values, 0, size);
  }

  public void unique(IntArrayList cnt) {
    cnt.clear();
    cnt.ensureCapacity(size);
    int newSize = %Type%ArrayUtils.unique(values, 0, size, cnt.values, 0);
    size = cnt.size = newSize;
  }

  public void sortAndUnique() {
    sort();
    unique();
  }

  public void sortAndUnique(IntArrayList cnt) {
    sort();
    unique(cnt);
  }

  public int lowerBound(%type% value) {
    return %Type%ArrayUtils.lowerBound(values, 0, size, value);
  }

  public int upperBound(%type% value) {
    return %Type%ArrayUtils.upperBound(values, 0, size, value);
  }

  public boolean binarySearch(%type% value) {
    int idx = lowerBound(value);
    return idx < size && get(idx) == value;
  }

  public int find(%type% value) {
    return %Type%ArrayUtils.find(values, 0, size, value);
  }

  public void reverse() {
    %Type%ArrayUtils.reverse(values, 0, size);
  }

  public void shuffle() {
    %Type%ArrayUtils.shuffle(values, 0, size);
  }

  public %type% kth(int kth) {
    return %Type%ArrayUtils.kth(values, 0, size, kth);
  }

  public void update(%type% delta) {
    %Type%ArrayUtils.update(values, 0, size, delta);
  }

  public boolean nextPermutation() {
    return %Type%ArrayUtils.nextPermutation(values, 0, size);
  }

  public void ensureCapacity(int capacity) {
    if (capacity <= values.length) return;
    %type%[] newValues = new %type%[IntUtils.nextPow2(capacity)];
    for (int i = 0; i < size; ++i) {
      newValues[i] = values[i];
    }
    values = newValues;
  }

  @Override
  public String toDisplay() {
    return %Type%ArrayUtils.toDisplay(values, 0, size);
  }

  @Override
  public Iterator<%Class%> iterator() {
    return new Iterator<%Class%>() {
      private int i = 0;

      @Override
      public boolean hasNext() {
        return i < size;
      }

      @Override
      public %Class% next() {
        return values[i++];
      }
    };
  }

  private void addInternal(%type% value) {
    values[size++] = value;
  }

  private int fixIdx(int idx) {
    if (size == 0) {
      throw new ArrayIndexOutOfBoundsException();
    }
    if (idx >= size) {
      return idx % size;
    } else if (idx < 0) {
      idx %= size;
      return idx < 0 ? idx + size : idx;
    }
    return idx;
  }
}
